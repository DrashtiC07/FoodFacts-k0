# Generated by Django 5.2.5 on 2025-08-14 09:16

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "barcode",
                    models.CharField(
                        max_length=20,
                        unique=True,
                        validators=[django.core.validators.MinLengthValidator(8)],
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("brand", models.CharField(blank=True, max_length=255)),
                ("category", models.CharField(blank=True, max_length=255)),
                ("ingredients", models.TextField(blank=True)),
                ("nutrition_info", models.JSONField(blank=True, default=dict)),
                ("image_url", models.URLField(blank=True, max_length=500)),
                ("ecoscore", models.CharField(blank=True, max_length=1)),
                ("nova_group", models.PositiveSmallIntegerField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("vegan", models.BooleanField(blank=True, null=True)),
                ("vegetarian", models.BooleanField(blank=True, null=True)),
                ("palm_oil_free", models.BooleanField(blank=True, null=True)),
                ("organic", models.BooleanField(blank=True, null=True)),
                ("allergens", models.JSONField(blank=True, default=list)),
                (
                    "health_score",
                    models.PositiveSmallIntegerField(blank=True, null=True),
                ),
            ],
        ),
        migrations.CreateModel(
            name="NutritionFact",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("energy_kcal", models.FloatField(blank=True, null=True)),
                ("fat", models.FloatField(blank=True, null=True)),
                ("saturated_fat", models.FloatField(blank=True, null=True)),
                ("carbohydrates", models.FloatField(blank=True, null=True)),
                ("sugars", models.FloatField(blank=True, null=True)),
                ("proteins", models.FloatField(blank=True, null=True)),
                ("salt", models.FloatField(blank=True, null=True)),
                ("fiber", models.FloatField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "product",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="nutrition_facts",
                        to="scanner.product",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ScanHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("scanned_at", models.DateTimeField(auto_now_add=True)),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="scanner.product",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Scan History",
                "ordering": ["-scanned_at"],
            },
        ),
        migrations.CreateModel(
            name="Review",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "rating",
                    models.IntegerField(
                        choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]
                    ),
                ),
                ("review_text", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="product_reviews",
                        to="scanner.product",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="product_reviews",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "unique_together": {("user", "product")},
            },
        ),
    ]
